import requests
import telebot
from django.conf import settings
from geopy import distance
from geopy.geocoders import Nominatim
from telebot import types
import googlemaps
from datetime import datetime
import polyline
from telegrambot.models import Profile

bot = telebot.TeleBot(token=settings.TOKEN)


@bot.message_handler(commands=['start'])
def welcome(message):
    bot.send_message(message.chat.id,
                     "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!\n–Ø - <b>{1.first_name}</b>, –±–æ—Ç –¥–ª—è –≤—ã–∑–æ–≤–∞ —Ç–∞–∫—Å–∏\n"
                     "–î–ª—è —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /contact"
                     .format(message.from_user, bot.get_me()), parse_mode='html')


@bot.message_handler(commands=['info'])
def info(message):
    bot.send_message(message.chat.id,
                     "–Ø <b>{1.first_name}</b> –±—ã–ª —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–± –≤—ã {0.first_name} –º–æ–≥–ª–∏ –≤—ã–∑–≤–∞—Ç—å —Ç–∞–∫—Å–∏.\n"
                     "–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ –º–Ω–æ–π:\n"
                     "/start - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞\n"
                     "/info ‚ùì - –æ—Ç–ø—Ä–∞–≤–ª—é –µ—â—ë —Ä–∞–∑ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
                     "/taxi üöï - –≤—ã–∑–æ–≤ —Ç–∞–∫—Å–∏\n"
                     "/contact üì± - –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–≤–æ–µ–π –∏–Ω—Ñ–æ—Ä–∞—Ü–∏–∏."
                     .format(message.from_user, bot.get_me()), parse_mode='html')


@bot.message_handler(commands=['taxi'])
def taxi(message):
    keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    button_geo = types.KeyboardButton(text="üìç", request_location=True)
    keyboard.add(button_geo)
    bot.send_message(message.chat.id,
                     '{0.first_name} –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—ë –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É üìç'.format(message.from_user),
                     reply_markup=keyboard)


@bot.message_handler(commands=['contact'])
def com_contact(message):
    keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    button_phone = types.KeyboardButton(text="üì±", request_contact=True)
    keyboard.add(button_phone)
    bot.send_message(message.chat.id,
                     '{0.first_name} –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É üì±'.format(message.from_user),
                     reply_markup=keyboard)


@bot.message_handler(content_types=['location'])
def location(message):
    if message.location is not None:
        lon = message.location.longitude
        lat = message.location.latitude
        ll = str(lat) + "," + str(lon)  # –¥–ª—è –≥–µ–æ–∫–æ–¥–∏–Ω–≥–∞
        zoom = 17  # –ú–∞—Å—à—Ç–∞–± –∫–∞—Ä—Ç—ã –Ω–∞ —Å—Ç–∞—Ä—Ç–µ. –ò–∑–º–µ–Ω—è–µ—Ç—Å—è –æ—Ç 1 –¥–æ 19
        size = str(650) + "x" + str(450)
        markers = "color:red%7Clabel:I%7C" + ll
        map_request_a = "https://maps.googleapis.com/maps/api/staticmap?size={size}&zoom={z}&center={ll}&markers={markers}&key=###########".format(
            ll=ll, size=size, z=zoom, markers=markers)
        response = requests.get(map_request_a)
        map_file = "map.png"
        try:
            with open(map_file, "wb") as file:
                file.write(response.content)
        except IOError as ex:
            print("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:", ex)
        photo = open('map.png', 'rb')
        bot.send_photo(message.chat.id, photo)
        geolocator = Nominatim(user_agent="specify_your_app_name_here")
        loc = geolocator.reverse(ll)
        bot.send_message(message.chat.id,
                         f'–í—ã —É–∫–∞–∑–∞–ª–∏ –∞–¥—Ä–µ—Å –ø–æ—Å–∞–¥–∫–∏ {loc.address}.\n'
                         f'–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –∫—É–¥–∞ –ø–æ–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º', )

        @bot.message_handler(content_types=['text'])
        def handle_message(message):
            grodno_address = "–ì—Ä–æ–¥–Ω–æ"
            address_trip = grodno_address + " " + message.text
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è 2 —Ç–æ—á–∫–∏
            loc_tho = geolocator.geocode(address_trip)
            lan_tho = loc_tho.latitude
            lon_tho = loc_tho.longitude
            lat_lon = str(lan_tho) + "," + str(lon_tho)  # –¥–ª—è –≥–µ–æ–∫–æ–¥–∏–Ω–≥–∞
            markers_tho = "color:red%7Clabel:I%7C" + lat_lon
            distance_trip = round(distance.distance(ll, lat_lon).km, 1)

            map_request_b = "https://maps.googleapis.com/maps/api/staticmap?size={size}&zoom={z}&center={ll}&markers={markers_tho}&key=#####".format(
                ll=lat_lon, size=size, z=zoom,
                markers_tho=markers_tho)
            response_b = requests.get(map_request_b)
            map_file_tho = "map_tho.png"
            try:
                with open(map_file_tho, "wb") as file_tho:
                    file_tho.write(response_b.content)
            except IOError as error:
                print("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:", error)
                ############
            now = datetime.now()
            gmaps = googlemaps.Client(key='###3')
            result = gmaps.directions(ll, lat_lon, mode="driving", departure_time=now)
            raw = result[0]['overview_polyline']['points']
            print(raw)
            points = polyline.decode(raw)
            pl = "|".join(["{0},{1}".format(p[0], p[1]) for p in points])
            path = "color:0xff0000ff |weight:5|"+pl
            map_request_c = "https://maps.googleapis.com/maps/api/staticmap?size={size}&markers={markers}&markers={markers_tho}&path={path}&key=#####".format(
                size=size, markers=markers,
                markers_tho=markers_tho, path=path)
            response_c = requests.get(map_request_c)
            map_file_c = "map_c.png"
            try:
                with open(map_file_c, "wb") as file_c:
                    file_c.write(response_c.content)
            except IOError as error:
                print("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:", error)
            ###############
            photo_b = open('map_tho.png', 'rb')
            bot.send_photo(message.chat.id, photo_b)
            photo_c = open('map_c.png', 'rb')
            bot.send_photo(message.chat.id, photo_c)
            bot.send_message(message.chat.id,
                             f'–í–∞—à –º–∞—Ä—à—Ä—É—Ç:  {loc.address}\n'
                             f'############################\n'
                             f'===>{loc_tho.address}\n'
                             f'–†–∞—Åc—Ç–æ—è–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ = {distance_trip}/–∫–º\n'
                             f'–û–∂–∏–¥–∞–π—Ç–µ –º–∞—à–∏–Ω—Éüöï ')


@bot.message_handler(content_types=['contact'])
def contact(message):
    if message.contact is not None:
        bot.send_message(message.chat.id,
                         f'–°–ø–∞—Å–∏–±–æ {message.from_user.first_name} {message.from_user.last_name}, –∑–∞ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.')
        p, _ = Profile.objects.get_or_create(
            external_id=message.chat.id,
            name=message.chat.first_name,
            surname=message.chat.last_name,
            number=message.contact.phone_number,
        )


# run
bot.polling(none_stop=True)
