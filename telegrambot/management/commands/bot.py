from datetime import datetime
import googlemaps
import polyline
import requests
import telebot
from django.conf import settings
from geopy import distance
from geopy.geocoders import Nominatim
from telebot import types
from telegrambot.models import Profile

bot = telebot.TeleBot(token=settings.TOKEN)


@bot.message_handler(commands=['start'])
def welcome(message):
    bot.send_message(message.chat.id,
                     "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!\n–Ø - <b>{1.first_name}</b>, –±–æ—Ç –¥–ª—è –≤—ã–∑–æ–≤–∞ —Ç–∞–∫—Å–∏\n"
                     "–î–ª—è —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /contact"
                     .format(message.from_user, bot.get_me()), parse_mode='html')


@bot.message_handler(commands=['info'])
def info(message):
    bot.send_message(message.chat.id,
                     "–Ø <b>{1.first_name}</b> –±—ã–ª —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–± –≤—ã {0.first_name} –º–æ–≥–ª–∏ –≤—ã–∑–≤–∞—Ç—å —Ç–∞–∫—Å–∏.\n"
                     "–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ –º–Ω–æ–π:\n"
                     "/start - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞\n"
                     "/info ‚ùì - –æ—Ç–ø—Ä–∞–≤–ª—é –µ—â—ë —Ä–∞–∑ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
                     "/taxi üöï - –≤—ã–∑–æ–≤ —Ç–∞–∫—Å–∏\n"
                     "/contact üì± - –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–≤–æ–µ–π –∏–Ω—Ñ–æ—Ä–∞—Ü–∏–∏."
                     .format(message.from_user, bot.get_me()), parse_mode='html')


@bot.message_handler(commands=['taxi'])
def taxi(message):
    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    button_geo = types.KeyboardButton(text="–£–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ üìç")
    button_text = types.KeyboardButton(text="–£–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ–º üìù")
    markup.add(button_geo, button_text)
    bot.send_message(message.chat.id,
                     '{0.first_name} –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É üìç –¥–ª—è —É–∫–∞–∑–∞–Ω–∏–µ –º–µ—Å—Ç–∞ –ø–æ—Å–∞–¥–∫–∏?'.format(message.from_user),
                     reply_markup=markup)
    bot.register_next_step_handler(message, start)  # —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ ‚Äì —Ñ—É–Ω–∫—Ü–∏—è get_name


@bot.message_handler(commands=['contact'])
def com_contact(message):
    keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    button_phone = types.KeyboardButton(text="üì±", request_contact=True)
    keyboard.add(button_phone)
    bot.send_message(message.chat.id,
                     '{0.first_name} –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É üì±'.format(message.from_user),
                     reply_markup=keyboard)


@bot.message_handler(content_types=['contact'])
def contact(message):
    if message.contact is not None:
        bot.send_message(message.chat.id,
                         f'–°–ø–∞—Å–∏–±–æ {message.from_user.first_name} {message.from_user.last_name}, –∑–∞ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.'
                         f'–ù–∞–ø–∏—à–∏—Ç–µ /info –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏')
        p, _ = Profile.objects.get_or_create(
            external_id=message.chat.id,
            name=message.chat.first_name,
            surname=message.chat.last_name,
            number=message.contact.phone_number,
        )


startAndEnd = {}


@bot.message_handler(content_types=['location'])
def location_medium(message):
    bot.send_message(message.from_user.id, '–î–ª—è –≤—ã–∑–æ–≤–∞ —Ç–∞–∫—Å–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /taxi')


@bot.message_handler(content_types=['text'])
def start(message):
    if message.text == '–£–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ–º üìù':
        bot.send_message(message.from_user.id, "–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –≥–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å.")
        bot.register_next_step_handler(message, start_trip)
    elif message.text == '–£–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ üìç':
        keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        button_geo = types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—ë –º–µ—Å—Ç–æ–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ üìç", request_location=True)
        keyboard.add(button_geo)
        bot.send_message(message.from_user.id, "–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ—ë –º–µ—Å—Ç–æ–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –∏–ª–∏ —á–µ—Ä–µ–∑ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é",
                         reply_markup=keyboard)
        bot.register_next_step_handler(message, location)
    else:
        bot.send_message(message.from_user.id, '–î–ª—è –≤—ã–∑–æ–≤–∞ —Ç–∞–∫—Å–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /taxi')


global loc


def location(message):
    if message.location is not None:
        idMain = message.chat.id
        startAndEnd[str(idMain)] = []  # —à–∞–≥ 1 –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        lon = message.location.longitude
        lat = message.location.latitude
        ll = str(lat) + "," + str(lon)  # –¥–ª—è –≥–µ–æ–∫–æ–¥–∏–Ω–≥–∞

        startAndEnd[str(idMain)].append(ll)  # —à–∞–≥ 2 —Ç–æ—á–∫–∞ —Å—Ç–∞—Ä—Ç–∞

        zoom = 17  # –ú–∞—Å—à—Ç–∞–± –∫–∞—Ä—Ç—ã –Ω–∞ —Å—Ç–∞—Ä—Ç–µ. –ò–∑–º–µ–Ω—è–µ—Ç—Å—è –æ—Ç 1 –¥–æ 19

        size = str(650) + "x" + str(450)
        markers = "color:red%7Clabel:A%7C" + startAndEnd[str(idMain)][0]
        map_request_a = "https://maps.googleapis.com/maps/api/staticmap?size={size}&zoom={z}&center={ll}&markers={markers}&key=AIzaSyC87S3ttehSCmIa76r7IE_omWk-3dEH1Rg".format(
            ll=startAndEnd[str(idMain)][0], size=size, z=zoom, markers=markers)
        response = requests.get(map_request_a)
        map_file = "map.png"
        try:
            with open(map_file, "wb") as file:
                file.write(response.content)
        except IOError as ex:
            print("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:", ex)

        photo = open('map.png', 'rb')
        bot.send_photo(message.chat.id, photo)
        geolocator = Nominatim(user_agent="specify_your_app_name_here")
        loc = geolocator.reverse(startAndEnd[str(idMain)][0])
        markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        button_geo_end = types.KeyboardButton(text="–£–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ üìç")
        button_message = types.KeyboardButton(text="–£–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ–º üìù")
        button_end = types.KeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–µ–∑–¥–∫—É ‚ùå")
        markup.add(button_geo_end, button_message, button_end)
        bot.send_message(message.chat.id,
                         f"–í—ã —É–∫–∞–∑–∞–ª–∏ –∞–¥—Ä–µ—Å –ø–æ—Å–∞–¥–∫–∏ {loc.address}.\n"
                         f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –£–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ üìç —á—Ç–æ–± —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–µ—á–Ω—ã–π –∞–¥—Ä–µ—Å –Ω–∞ –∫–∞—Ä—Ç–µ\n"
                         f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –£–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ–º üìù \n—á—Ç–æ–± —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–µ—á–Ω—ã–π –∞–¥—Ä–µ—Å c–æ–æ–±—â–µ–Ω–∏–µ–º\n"
                         f"–ï—Å–ª–∏ –≤—ã –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ –µ—Ö–∞—Ç—å –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–µ–∑–¥–∫—É ‚ùå", reply_markup=markup)
        bot.register_next_step_handler(message, location_medium)
    else:
        bot.send_message(message.from_user.id, '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É')


# –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
def start_trip(message):
    global markers
    idMain = message.chat.id
    grodno_address = "–ì—Ä–æ–¥–Ω–æ"
    loc = grodno_address + " " + message.text
    startAndEnd[str(idMain)] = []  # —à–∞–≥ 1 –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    geolocator = Nominatim(user_agent="specify_your_app_name_here")
    loc_to = geolocator.geocode(loc)
    ll = str(loc_to.latitude) + "," + str(loc_to.longitude)  # –¥–ª—è –≥–µ–æ–∫–æ–¥–∏–Ω–≥–∞

    startAndEnd[str(idMain)].append(ll)  # —à–∞–≥ 2 —Ç–æ—á–∫–∞ —Å—Ç–∞—Ä—Ç–∞

    zoom = 17  # –ú–∞—Å—à—Ç–∞–± –∫–∞—Ä—Ç—ã –Ω–∞ —Å—Ç–∞—Ä—Ç–µ. –ò–∑–º–µ–Ω—è–µ—Ç—Å—è –æ—Ç 1 –¥–æ 19

    size = str(650) + "x" + str(450)
    markers = "color:red%7Clabel:A%7C" + startAndEnd[str(idMain)][0]
    map_request_a = "https://maps.googleapis.com/maps/api/staticmap?size={size}&zoom={z}&center={ll}&markers={markers}&key=AIzaSyC87S3ttehSCmIa76r7IE_omWk-3dEH1Rg".format(
        ll=startAndEnd[str(idMain)][0], size=size, z=zoom, markers=markers)
    response = requests.get(map_request_a)
    map_file = "map.png"
    try:
        with open(map_file, "wb") as file:
            file.write(response.content)
    except IOError as ex:
        print("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:", ex)
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    button_geo_end = types.KeyboardButton(text="–£–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ üìç")
    button_message = types.KeyboardButton(text="–£–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ–º üìù")
    button_end = types.KeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–µ–∑–¥–∫—É ‚ùå")
    markup.add(button_geo_end, button_message, button_end)

    photo = open('map.png', 'rb')
    bot.send_photo(message.chat.id, photo)
    bot.send_message(message.chat.id,
                     f'–í—ã —É–∫–∞–∑–∞–ª–∏ –∞–¥—Ä–µ—Å –ø–æ—Å–∞–¥–∫–∏ {loc}')
    bot.send_message(message.chat.id,
                     f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –£–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ üìç —á—Ç–æ–± —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–µ—á–Ω—ã–π –∞–¥—Ä–µ—Å –Ω–∞ –∫–∞—Ä—Ç–µ\n"
                     f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –£–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ–º üìù —á—Ç–æ–± —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–µ—á–Ω—ã–π –∞–¥—Ä–µ—Å c–æ–æ–±—â–µ–Ω–∏–µ–º\n"
                     f"–ï—Å–ª–∏ –≤—ã –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ –µ—Ö–∞—Ç—å –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–µ–∑–¥–∫—É ‚ùå", reply_markup=markup)
    bot.register_next_step_handler(message, location_medium)


def location_medium(message):
    if message.text == '–£–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ üìç':
        bot.send_message(message.from_user.id, "–û—Ç–ø—Ä–∞–≤—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é ")
        bot.register_next_step_handler(message, location_end)  # —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ ‚Äì —Ñ—É–Ω–∫—Ü–∏—è get_name
    if message.text == '–£–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ–º üìù':
        bot.send_message(message.from_user.id, "–ù–∞–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º!")
        bot.register_next_step_handler(message, end_trip)  # —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ ‚Äì –ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    elif message.text == '–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–µ–∑–¥–∫—É ‚ùå':
        markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        button_info = types.KeyboardButton(text="/info")
        markup.add(button_info)
        bot.send_message(message.from_user.id, '–í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–º—ë–Ω—ë–Ω!', reply_markup=markup)


######–¥–ª—è –ª–æ–∫–∞—Ü–∏–∏
def location_end(message):
    if message.location is not None:
        idMain = message.chat.id
        geolocator = Nominatim(user_agent="specify_your_app_name_here")
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è 2 —Ç–æ—á–∫–∏
        lon_tho = message.location.longitude
        lan_tho = message.location.latitude
        lat_lon = str(lan_tho) + "," + str(lon_tho)  # –¥–ª—è –≥–µ–æ–∫–æ–¥–∏–Ω–≥–∞
        loc_tho = geolocator.reverse(lat_lon)
        startAndEnd[str(idMain)].append(lat_lon)  # —à–∞–≥ 2 —Ç–æ—á–∫–∞ —Å—Ç–∞—Ä—Ç–∞
        zoom = 17  # –ú–∞—Å—à—Ç–∞–± –∫–∞—Ä—Ç—ã –Ω–∞ —Å—Ç–∞—Ä—Ç–µ. –ò–∑–º–µ–Ω—è–µ—Ç—Å—è –æ—Ç 1 –¥–æ 19
        size = str(650) + "x" + str(450)
        markers_tho = "color:red%7Clabel:B%7C" + startAndEnd[str(idMain)][1]
        distance_trip = round(distance.distance(startAndEnd[str(idMain)][0], startAndEnd[str(idMain)][1]).km, 1)
        map_request_b = "https://maps.googleapis.com/maps/api/staticmap?size={size}&zoom={z}&center={ll}&markers={markers_tho}&key=AIzaSyC87S3ttehSCmIa76r7IE_omWk-3dEH1Rg".format(
            ll=startAndEnd[str(idMain)][1], size=size, z=zoom,
            markers_tho=markers_tho)
        response_b = requests.get(map_request_b)
        map_file_tho = "map_tho.png"
        try:
            with open(map_file_tho, "wb") as file_tho:
                file_tho.write(response_b.content)
        except IOError as error:
            print("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:", error)
        now = datetime.now()
        gmaps = googlemaps.Client(key='AIzaSyC87S3ttehSCmIa76r7IE_omWk-3dEH1Rg')
        result = gmaps.directions(startAndEnd[str(idMain)][0], startAndEnd[str(idMain)][1], mode="driving",
                                  departure_time=now)
        raw = result[0]['overview_polyline']['points']
        print(raw)
        points = polyline.decode(raw)
        pl = "|".join(["{0},{1}".format(p[0], p[1]) for p in points])
        path = "color:0xff0000ff |weight:5|" + pl
        map_request_c = "https://maps.googleapis.com/maps/api/staticmap?size={size}&markers={markers}&markers={markers_tho}&path={path}&key=AIzaSyC87S3ttehSCmIa76r7IE_omWk-3dEH1Rg".format(
            size=size, markers=startAndEnd[str(idMain)][0],
            markers_tho=markers_tho, path=path)
        response_c = requests.get(map_request_c)
        map_file_c = "map_c.png"
        try:
            with open(map_file_c, "wb") as file_c:
                file_c.write(response_c.content)
        except IOError as error:
            print("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:", error)
        photo_b = open('map_tho.png', 'rb')
        bot.send_photo(message.chat.id, photo_b)
        photo_c = open('map_c.png', 'rb')
        bot.send_photo(message.chat.id, photo_c)
        markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        button_dop = types.KeyboardButton(text="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ –ø–æ–µ–∑–¥–∫–∏")
        button_ok = types.KeyboardButton(text="–ü–æ–µ—Ö–∞–ª–∏")
        button_exit_dop = types.KeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–µ–∑–¥–∫—É ‚ùå")
        markup.add(button_dop, button_ok, button_exit_dop)
        loc = geolocator.reverse(startAndEnd[str(idMain)][0])
        price = round(distance_trip)
        taxi_time = round(distance_trip / 0.6)
        if price < 1:
            price = 1
        bot.send_message(message.chat.id,
                         f'–í–∞—à –º–∞—Ä—à—Ä—É—Ç: {loc}\n'
                         f'===>{loc_tho.address}\n'
                         f'–†–∞—Åc—Ç–æ—è–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ = {distance_trip}/–∫–º\n'
                         f'–û–∂–∏–¥–∞–π—Ç–µ –º–∞—à–∏–Ω—Éüöï\n'
                         f'–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–µ–∑–¥–∫–∏ {price}–†\n'
                         f'–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è:{taxi_time} –º–∏–Ω.', reply_markup=markup)
        bot.register_next_step_handler(message, dop_start_medium)
    else:
        bot.send_message(message.from_user.id, '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É')


def end_trip(message):
    global markers_tho, price
    global loc_tho
    idMain = message.chat.id
    groan_address = "–ì—Ä–æ–¥–Ω–æ"
    # trip_b= message.text
    geolocator = Nominatim(user_agent="specify_your_app_name_here")
    loc_tho = groan_address + " " + message.text
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è 2 —Ç–æ—á–∫–∏
    loc_tho_chat = geolocator.geocode(loc_tho)
    lan_tho = loc_tho_chat.latitude
    lon_tho = loc_tho_chat.longitude
    lat_lon = str(lan_tho) + "," + str(lon_tho)  # –¥–ª—è –≥–µ–æ–∫–æ–¥–∏–Ω–≥–∞
    startAndEnd[str(idMain)].append(lat_lon)  # —à–∞–≥ 2 —Ç–æ—á–∫–∞ —Å—Ç–∞—Ä—Ç–∞
    zoom = 17  # –ú–∞—Å—à—Ç–∞–± –∫–∞—Ä—Ç—ã –Ω–∞ —Å—Ç–∞—Ä—Ç–µ. –ò–∑–º–µ–Ω—è–µ—Ç—Å—è –æ—Ç 1 –¥–æ 19
    size = str(650) + "x" + str(450)
    markers_tho = "color:red%7Clabel:B%7C" + startAndEnd[str(idMain)][1]
    distance_trip = round(distance.distance(startAndEnd[str(idMain)][0], startAndEnd[str(idMain)][1]).km, 1)
    map_request_b = "https://maps.googleapis.com/maps/api/staticmap?size={size}&zoom={z}&center={ll}&markers={markers_tho}&key=AIzaSyC87S3ttehSCmIa76r7IE_omWk-3dEH1Rg".format(
        ll=startAndEnd[str(idMain)][1], size=size, z=zoom,
        markers_tho=markers_tho)
    response_b = requests.get(map_request_b)
    map_file_tho = "map_tho.png"
    try:
        with open(map_file_tho, "wb") as file_tho:
            file_tho.write(response_b.content)
    except IOError as error:
        print("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:", error)
    now = datetime.now()
    gmaps = googlemaps.Client(key='AIzaSyC87S3ttehSCmIa76r7IE_omWk-3dEH1Rg')
    result = gmaps.directions(startAndEnd[str(idMain)][0], startAndEnd[str(idMain)][1], mode="driving",
                              departure_time=now)
    raw = result[0]['overview_polyline']['points']
    points = polyline.decode(raw)
    pl = "|".join(["{0},{1}".format(p[0], p[1]) for p in points])
    path = "color:0xff0000ff |weight:5|" + pl
    map_request_c = "https://maps.googleapis.com/maps/api/staticmap?size={size}&markers={markers}&markers={markers_tho}&path={path}&key=AIzaSyC87S3ttehSCmIa76r7IE_omWk-3dEH1Rg".format(
        size=size, markers=startAndEnd[str(idMain)][0],
        markers_tho=markers_tho, path=path)
    response_c = requests.get(map_request_c)
    map_file_c = "map_c.png"
    try:
        with open(map_file_c, "wb") as file_c:
            file_c.write(response_c.content)
    except IOError as error:
        print("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:", error)
    photo_b = open('map_tho.png', 'rb')
    bot.send_photo(message.chat.id, photo_b)
    photo_c = open('map_c.png', 'rb')
    bot.send_photo(message.chat.id, photo_c)
    price = round(distance_trip)
    if price < 1:
        price = 1
    loc = geolocator.reverse(startAndEnd[str(idMain)][0])
    taxi_time = round(distance_trip / 0.6)
    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    button_dop = types.KeyboardButton(text="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ –ø–æ–µ–∑–¥–∫–∏")
    button_ok = types.KeyboardButton(text="–ü–æ–µ—Ö–∞–ª–∏")
    button_exit_dop = types.KeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–µ–∑–¥–∫—É ‚ùå")
    markup.add(button_dop, button_ok, button_exit_dop,)
    bot.send_message(message.chat.id,
                     f'–í–∞—à –º–∞—Ä—à—Ä—É—Ç:{loc}'
                     f'===>{loc_tho}\n'
                     f'–†–∞—Åc—Ç–æ—è–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ = {distance_trip}/–∫–º\n'
                     f'–û–∂–∏–¥–∞–π—Ç–µ –º–∞—à–∏–Ω—Éüöï \n'
                     f'–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–µ–∑–¥–∫–∏: {price}P\n'
                     f'–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è {taxi_time}/–º–∏–Ω', reply_markup=markup)
    bot.register_next_step_handler(message, dop_start_medium)


def dop_start_medium(message):
    if message.text == '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ –ø–æ–µ–∑–¥–∫–∏':
        markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        button_geo_end = types.KeyboardButton(text="–£–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ üìç")
        button_message = types.KeyboardButton(text="–£–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ–º üìù")
        button_end = types.KeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–µ–∑–¥–∫—É ‚ùå")
        markup.add(button_geo_end, button_message, button_end)
        bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤–≤–æ–¥–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Ç–æ—á–∫–∏", reply_markup=markup)
        bot.register_next_step_handler(message, dop_start)
    elif message.text == '–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–µ–∑–¥–∫—É ‚ùå':
        markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        button_info = types.KeyboardButton(text="/info")
        markup.add(button_info)
        bot.send_message(message.from_user.id, '–í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–º—ë–Ω—ë–Ω!', reply_markup=markup)
    elif message.text == '–ü–æ–µ—Ö–∞–ª–∏':
        bot.send_message(message.from_user.id, '–•–æ—Ä–æ—à–µ–π –ø–æ–µ–∑–¥–∫–∏!')


def dop_start(message):
    if message.text == '–£–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ üìç':
        bot.send_message(message.from_user.id, "–û—Ç–ø—Ä–∞–≤—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é ")
        bot.register_next_step_handler(message, location_point)
    if message.text == '–£–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ–º üìù':
        bot.send_message(message.from_user.id, "–ù–∞–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º!")
        bot.register_next_step_handler(message, dop_trip)  # —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ ‚Äì –ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    elif message.text == '–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–µ–∑–¥–∫—É ‚ùå':
        markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        button_info = types.KeyboardButton(text="/info")
        markup.add(button_info)
        bot.send_message(message.from_user.id, '–í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–º—ë–Ω—ë–Ω!', reply_markup=markup)


def location_point(message):
    if message.location is not None:
        idMain = message.chat.id
        geolocator = Nominatim(user_agent="specify_your_app_name_here")
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Ç–æ—á–∫–∏ —Ç–æ—á–∫–∏
        lon_tho = message.location.longitude
        lan_tho = message.location.latitude
        lat_lon_dop = str(lan_tho) + "," + str(lon_tho)  # –¥–ª—è –≥–µ–æ–∫–æ–¥–∏–Ω–≥–∞
        loc_tho_dop = geolocator.reverse(lat_lon_dop)
        startAndEnd[str(idMain)].append(lat_lon_dop)  # —à–∞–≥ 2 —Ç–æ—á–∫–∞ —Å—Ç–∞—Ä—Ç–∞
        size = str(650) + "x" + str(450)
        distance_trip_one = round(
            distance.distance(startAndEnd[str(idMain)][0], startAndEnd[str(idMain)][2]).km, 1)
        distance_trip_tho = round(distance.distance(startAndEnd[str(idMain)][2], startAndEnd[str(idMain)][1]).km, 1)
        distance_trip = distance_trip_one + distance_trip_tho
        now = datetime.now()
        gmaps = googlemaps.Client(key='AIzaSyC87S3ttehSCmIa76r7IE_omWk-3dEH1Rg')
        result = gmaps.directions(startAndEnd[str(idMain)][0], startAndEnd[str(idMain)][2], mode="driving",
                                  departure_time=now)
        raw = result[0]['overview_polyline']['points']
        points = polyline.decode(raw)
        pl = "|".join(["{0},{1}".format(p[0], p[1]) for p in points])
        result_tho = gmaps.directions(startAndEnd[str(idMain)][2], startAndEnd[str(idMain)][1],
                                      mode="driving",
                                      departure_time=now)
        raw_tho = result_tho[0]['overview_polyline']['points']
        points_tho = polyline.decode(raw_tho)
        pl_tho = "|".join(["{0},{1}".format(p[0], p[1]) for p in points_tho])
        pl_general = pl + "|" + pl_tho
        path = "color:0xff0000ff |weight:5|" + pl_general
        map_request_dop = "https://maps.googleapis.com/maps/api/staticmap?size={size}&markers={markers}&markers={markers_tho}&markers={markers_dop}&path={path}&key=AIzaSyC87S3ttehSCmIa76r7IE_omWk-3dEH1Rg".format(
            size=size,
            markers=startAndEnd[str(idMain)][0],
            markers_tho=startAndEnd[str(idMain)][1],
            markers_dop=startAndEnd[str(idMain)][2],
            path=path)
        price_loc = round(distance_trip)
        if price_loc < 1:
            price_loc = 1
        taxi_time = round(distance_trip / 0.6)
        response_c = requests.get(map_request_dop)
        map_file_dop = "map_dop.png"
        try:
            with open(map_file_dop, "wb") as file_c:
                file_c.write(response_c.content)
        except IOError as error:
            print("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:", error)
        loc = geolocator.reverse(startAndEnd[str(idMain)][0])
        loc_tho = geolocator.reverse(startAndEnd[str(idMain)][1])
        markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        button_ok = types.KeyboardButton(text="–ü–æ–µ—Ö–∞–ª–∏")
        button_no = types.KeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–µ–∑–¥–∫—É ‚ùå")
        markup.add(button_ok,button_no)
        photo_dop = open('map_dop.png', 'rb')
        bot.send_photo(message.chat.id, photo_dop)

        bot.send_message(message.chat.id,
                         f'–í–∞—à –º–∞—Ä—à—Ä—É—Ç –ø–µ—Ä–µ—Å—Ç—Ä–æ–µ–Ω:  {loc}\n'
                         f'===>{loc_tho_dop.address}\n'
                         f'===>{loc_tho}\n'
                         f'–†–∞—Åc—Ç–æ—è–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ = {distance_trip}/–∫–º\n'
                         f'–û–∂–∏–¥–∞–π—Ç–µ –º–∞—à–∏–Ω—Éüöï\n'
                         f'–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–µ–∑–¥–∫–∏{price_loc}–†\n'
                         f'–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è{taxi_time}/–º–∏–Ω', reply_markup=markup)

        bot.register_next_step_handler(message, exit_trip)


def dop_trip(message):
    global price
    idMain = message.chat.id
    groan_address = "–ì—Ä–æ–¥–Ω–æ"
    geolocator = Nominatim(user_agent="specify_your_app_name_here")
    address_trip_dop = groan_address + " " + message.text
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è 2 —Ç–æ—á–∫–∏
    loc_dop = geolocator.geocode(address_trip_dop)
    lan_dop = loc_dop.latitude
    lon_dop = loc_dop.longitude
    lat_dop = str(lan_dop) + "," + str(lon_dop)  # –¥–ª—è –≥–µ–æ–∫–æ–¥–∏–Ω–≥–∞
    startAndEnd[str(idMain)].append(lat_dop)  # —à–∞–≥ 2 —Ç–æ—á–∫–∞ —Å—Ç–∞—Ä—Ç–∞
    markers_dop = "color:red%7Clabel:B%7C" + startAndEnd[str(idMain)][2]
    size = str(650) + "x" + str(450)
    distance_trip_one = round(distance.distance(startAndEnd[str(idMain)][0], startAndEnd[str(idMain)][2]).km, 1)
    distance_trip_tho = round(distance.distance(startAndEnd[str(idMain)][2], startAndEnd[str(idMain)][1]).km, 1)
    distance_trip = round(distance_trip_one + distance_trip_tho)
    now = datetime.now()
    gmaps = googlemaps.Client(key='AIzaSyC87S3ttehSCmIa76r7IE_omWk-3dEH1Rg')
    result = gmaps.directions(startAndEnd[str(idMain)][0], startAndEnd[str(idMain)][2], mode="driving",
                              departure_time=now)
    raw = result[0]['overview_polyline']['points']
    points = polyline.decode(raw)
    pl = "|".join(["{0},{1}".format(p[0], p[1]) for p in points])
    result_tho = gmaps.directions(startAndEnd[str(idMain)][2], startAndEnd[str(idMain)][1],
                                  mode="driving",
                                  departure_time=now)
    raw_tho = result_tho[0]['overview_polyline']['points']
    points_tho = polyline.decode(raw_tho)
    pl_tho = "|".join(["{0},{1}".format(p[0], p[1]) for p in points_tho])
    pl_general = pl + "|" + pl_tho
    path = "color:0xff0000ff |weight:5|" + pl_general
    map_request_c = "https://maps.googleapis.com/maps/api/staticmap?size={size}&markers={markers}&markers={markers_tho}&markers={markers_dop}&path={path}&key=AIzaSyC87S3ttehSCmIa76r7IE_omWk-3dEH1Rg".format(
        size=size, markers=startAndEnd[str(idMain)][0],
        markers_tho=markers_tho, path=path, markers_dop=markers_dop)
    response_c = requests.get(map_request_c)
    map_file_dop = "map_dop.png"
    try:
        with open(map_file_dop, "wb") as file_c:
            file_c.write(response_c.content)
    except IOError as error:
        print("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:", error)
    photo_dop = open('map_dop.png', 'rb')
    price = round(distance_trip)
    if price < 1:
        price = 1
    taxi_time = round(distance_trip / 0.6)
    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    button_ok = types.KeyboardButton(text="–ü–æ–µ—Ö–∞–ª–∏")
    button_no = types.KeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–µ–∑–¥–∫—É ‚ùå")
    loc = geolocator.reverse(startAndEnd[str(idMain)][0])
    loc_tho = geolocator.reverse(startAndEnd[str(idMain)][1])
    markup.add(button_ok, button_no)
    bot.send_photo(message.chat.id, photo_dop)
    bot.send_message(message.chat.id,
                     f'–í–∞—à –º–∞—Ä—à—Ä—É—Ç –ø–µ—Ä–µ—Å—Ç—Ä–æ–µ–Ω: {loc}\n'
                     f'===>{address_trip_dop}\n'
                     f'===>{loc_tho}\n'
                     f'–†–∞—Åc—Ç–æ—è–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ = {distance_trip}/–∫–º\n'
                     f'–û–∂–∏–¥–∞–π—Ç–µ –º–∞—à–∏–Ω—Éüöï\n'
                     f'–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–µ–∑–¥–∫–∏: {price}\n'
                     f'–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è {taxi_time}', reply_markup=markup)
    bot.register_next_step_handler(message, exit_trip)


def exit_trip(message):
    if message.text == '–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–µ–∑–¥–∫—É ‚ùå':
        markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        button_info = types.KeyboardButton(text="/info")
        markup.add(button_info)
        bot.send_message(message.from_user.id, '–í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–º—ë–Ω—ë–Ω!', reply_markup=markup)
    elif message.text == '–ü–æ–µ—Ö–∞–ª–∏':
        bot.send_message(message.from_user.id, '–•–æ—Ä–æ—à–µ–π –ø–æ–µ–∑–¥–∫–∏!')


# run
bot.polling(none_stop=True)
